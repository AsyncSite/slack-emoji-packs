name: Validate Emoji Pack PR

on:
  pull_request:
    paths:
      - 'images/**'
      - 'packs.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install Pillow
          pip install PyYAML
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            images/**/*.png
            images/**/*.gif
      
      - name: Validate emoji files
        id: validate
        run: |
          python scripts/validate_pack.py ${{ steps.changed-files.outputs.all_changed_files }}
        continue-on-error: true
      
      - name: Comment PR with validation results
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '## 🔍 Emoji Pack Validation Results\n\n';
            
            try {
              const validationResults = fs.readFileSync('validation_report.md', 'utf8');
              comment += validationResults;
            } catch (error) {
              comment += '✅ All validations passed!';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Emoji Pack Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Fail if validation failed
        if: steps.validate.outcome == 'failure'
        run: exit 1